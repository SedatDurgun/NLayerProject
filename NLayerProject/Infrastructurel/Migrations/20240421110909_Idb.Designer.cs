// <auto-generated />
using System;
using Infrastructurel;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Infrastructurel.Migrations
{
    [DbContext(typeof(UrunContext))]
    [Migration("20240421110909_Idb")]
    partial class Idb
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("DomainLayer.Entities.Concrete.Kategorı", b =>
                {
                    b.Property<int>("KategorıID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("KategorıID"));

                    b.Property<DateTime>("EklenmeTarih")
                        .HasColumnType("smalldatetime");

                    b.Property<DateTime?>("GuncellenmeTarih")
                        .HasColumnType("smalldatetime");

                    b.Property<string>("KategoriAdi")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar");

                    b.Property<int>("KayitDurumu")
                        .HasColumnType("int");

                    b.Property<DateTime?>("PasiflestirildiTarih")
                        .HasColumnType("smalldatetime");

                    b.HasKey("KategorıID");

                    b.ToTable("Kategoriler");

                    b.HasData(
                        new
                        {
                            KategorıID = 1,
                            EklenmeTarih = new DateTime(2024, 4, 21, 14, 9, 9, 111, DateTimeKind.Local).AddTicks(7262),
                            KategoriAdi = "Elektronik ",
                            KayitDurumu = 1
                        },
                        new
                        {
                            KategorıID = 2,
                            EklenmeTarih = new DateTime(2024, 4, 21, 14, 9, 9, 111, DateTimeKind.Local).AddTicks(7279),
                            KategoriAdi = "Hediyelik Eşya ",
                            KayitDurumu = 1
                        },
                        new
                        {
                            KategorıID = 3,
                            EklenmeTarih = new DateTime(2024, 4, 21, 14, 9, 9, 111, DateTimeKind.Local).AddTicks(7280),
                            KategoriAdi = " Hobi ",
                            KayitDurumu = 1
                        });
                });

            modelBuilder.Entity("DomainLayer.Entities.Concrete.Rol", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Uye",
                            NormalizedName = "UYE"
                        });
                });

            modelBuilder.Entity("DomainLayer.Entities.Concrete.Sepet", b =>
                {
                    b.Property<int>("SepetID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SepetID"));

                    b.Property<int>("Adet")
                        .HasColumnType("int");

                    b.Property<DateTime>("EklenmeTarih")
                        .HasColumnType("smalldatetime");

                    b.Property<DateTime?>("GuncellenmeTarih")
                        .HasColumnType("smalldatetime");

                    b.Property<int>("KayitDurumu")
                        .HasColumnType("int");

                    b.Property<DateTime?>("PasiflestirildiTarih")
                        .HasColumnType("smalldatetime");

                    b.Property<int>("UrunID")
                        .HasColumnType("int");

                    b.Property<int>("UyeID")
                        .HasColumnType("int");

                    b.HasKey("SepetID");

                    b.HasIndex("UrunID");

                    b.HasIndex("UyeID");

                    b.ToTable("Sepetler");
                });

            modelBuilder.Entity("DomainLayer.Entities.Concrete.Urun", b =>
                {
                    b.Property<int>("UrunID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UrunID"));

                    b.Property<string>("Acıklama")
                        .HasMaxLength(500)
                        .HasColumnType("varchar");

                    b.Property<DateTime>("EklenmeTarih")
                        .HasColumnType("smalldatetime");

                    b.Property<decimal>("Fiyat")
                        .HasColumnType("money");

                    b.Property<DateTime?>("GuncellenmeTarih")
                        .HasColumnType("smalldatetime");

                    b.Property<int>("KategoriID")
                        .HasColumnType("int");

                    b.Property<int>("KayitDurumu")
                        .HasColumnType("int");

                    b.Property<DateTime?>("PasiflestirildiTarih")
                        .HasColumnType("smalldatetime");

                    b.Property<string>("Resim")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar");

                    b.Property<string>("UrunAdi")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar");

                    b.Property<string>("UrunVideo")
                        .HasMaxLength(100)
                        .HasColumnType("varchar");

                    b.HasKey("UrunID");

                    b.HasIndex("KategoriID");

                    b.ToTable("Urunler");
                });

            modelBuilder.Entity("DomainLayer.Entities.Concrete.Uye", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("Ad")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar");

                    b.Property<string>("Adres")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Soyad")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AccessFailedCount = 0,
                            Ad = "Super",
                            Adres = "Ankara",
                            ConcurrencyStamp = "542ae867-2aa6-44ea-8a08-ee4f7e228644",
                            Email = "superadmin@deneme.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "SuperAdmin@deneme.com",
                            NormalizedUserName = "SuperAdmin",
                            PasswordHash = "AQAAAAIAAYagAAAAEHyvXcN4NEGs2yTMrAdcTtDQ2kaGhW1WDBDm1jHY8NgXPBhJP2qXyxjPCUz4Hd/mEg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "1fc6e736-7607-421b-81e7-6eadae783213",
                            Soyad = "Admin",
                            TwoFactorEnabled = false,
                            UserName = "superAdmin"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = 1,
                            RoleId = 1
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("DomainLayer.Entities.Concrete.Sepet", b =>
                {
                    b.HasOne("DomainLayer.Entities.Concrete.Urun", "Urun")
                        .WithMany("Sepettekiler")
                        .HasForeignKey("UrunID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DomainLayer.Entities.Concrete.Uye", "Uye")
                        .WithMany("Sepettekiler")
                        .HasForeignKey("UyeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Urun");

                    b.Navigation("Uye");
                });

            modelBuilder.Entity("DomainLayer.Entities.Concrete.Urun", b =>
                {
                    b.HasOne("DomainLayer.Entities.Concrete.Kategorı", "Kategori")
                        .WithMany("Urunler")
                        .HasForeignKey("KategoriID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Kategori");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.HasOne("DomainLayer.Entities.Concrete.Rol", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.HasOne("DomainLayer.Entities.Concrete.Uye", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.HasOne("DomainLayer.Entities.Concrete.Uye", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.HasOne("DomainLayer.Entities.Concrete.Rol", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DomainLayer.Entities.Concrete.Uye", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.HasOne("DomainLayer.Entities.Concrete.Uye", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DomainLayer.Entities.Concrete.Kategorı", b =>
                {
                    b.Navigation("Urunler");
                });

            modelBuilder.Entity("DomainLayer.Entities.Concrete.Urun", b =>
                {
                    b.Navigation("Sepettekiler");
                });

            modelBuilder.Entity("DomainLayer.Entities.Concrete.Uye", b =>
                {
                    b.Navigation("Sepettekiler");
                });
#pragma warning restore 612, 618
        }
    }
}
